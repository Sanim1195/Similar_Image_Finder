import os
import torch
import clip
from PIL import Image
import numpy as np
from sklearn.cluster import KMeans

device = "cpu"
model, preprocess = clip.load("ViT-L/14", device, jit=False)
# labels = ["a", "a", "a", "b", "b", "b", "c", "c", "d"]
name_list = []
np_array = []

# looping through image folder
for photos in os.listdir("assets/photos"):
    image_path = os.path.join("assets/photos", photos)
    # Pre processing images and getting their tensor
    image = preprocess(Image.open(image_path)).unsqueeze(0).to(device)
    name_list.append(photos)
    # Flatten the higher dimension of tensors to like 2dim
    numpyImage = np.array(image).flatten()
    np_array.append(numpyImage)


k = 3
kmeans = KMeans(n_clusters=k, random_state=42)
kmeans.fit(np_array)

# getting int like labels(auto generated by KMeans)
cluster_labels = kmeans.labels_
image_cluster_map = {}
# Looping through the images and giving them labels
for i, labels in enumerate(cluster_labels):
    # print(f"Image {i} belongs to cluster {labels}")
    image_cluster_map[f'image_{name_list[i]}'] = labels

# viewing our final cluster
for i, (key, value) in enumerate(image_cluster_map.items()):
    print(key, " labelled as: ", value)
